<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>model.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">model.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="model_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file model.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of functions in Model class.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="model_8h.xhtml">model.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a7b7106f97e635f838e07eefd8e7e363a">Model::kDefaultName</a>[] = <span class="stringliteral">&quot;unnamed-model&quot;</span>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a9cc591bf6c40805064ea0a9ec0c453c7">   31</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a9cc591bf6c40805064ea0a9ec0c453c7">Model::Model</a>(std::string name)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(name.empty() ? kDefaultName : std::move(name)),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      mission_time_(std::make_shared&lt;<a class="code" href="classscram_1_1mef_1_1MissionTime.xhtml">MissionTime</a>&gt;()) {}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">   35</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a> event_tree) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">if</span> (event_trees_.count(event_tree-&gt;name())) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of event tree &quot;</span> + event_tree-&gt;name());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  event_trees_.insert(std::move(event_tree));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a5c335d6a7e9e836abce8ac7ac778a20b">   42</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a591b6cd46293cb8fd4764c12410ebf73">SequencePtr</a>&amp; sequence) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keywordflow">if</span> (sequences_.count(sequence-&gt;name())) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of sequence &quot;</span> + sequence-&gt;name());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  sequences_.insert(std::move(sequence));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#ab67ad000d7494da9f37e7e6a23433e01">   49</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a> fault_tree) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">if</span> (fault_trees_.count(fault_tree-&gt;name())) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of fault tree &quot;</span> + fault_tree-&gt;name());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  fault_trees_.insert(std::move(fault_tree));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a2c1e35e2a9aff342863731585fccdceb">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; parameter) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">if</span> (!parameters_.Add(parameter)) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of parameter &quot;</span> + parameter-&gt;name());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a45b55b3aa3123449eef1ad8d1aa25a6c">   62</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a>&amp; house_event) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordtype">bool</span> original = events_.insert(house_event.get()).second;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">if</span> (!original) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of event &quot;</span> + house_event-&gt;name());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  house_events_.Add(house_event);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a7947f0bb5bc412e0c0f0358e63195c2b">   70</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; basic_event) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordtype">bool</span> original = events_.insert(basic_event.get()).second;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">if</span> (!original) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of event &quot;</span> + basic_event-&gt;name());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  basic_events_.Add(basic_event);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a7c1c39cb90da48bd2806416fac83bfe0">   78</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordtype">bool</span> original = events_.insert(gate.get()).second;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">if</span> (!original) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of event &quot;</span> + gate-&gt;name());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  gates_.Add(gate);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a19a16e47929a3b127e1b5e7d20626a40">   86</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">Model::Add</a>(<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; ccf_group) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (ccf_groups_.insert(ccf_group).second == <span class="keyword">false</span>) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of CCF group &quot;</span> + ccf_group-&gt;name());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#a0ccac47c51f11484aed5e7cf3bdd73dd">   92</a></span>&#160;<a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#a0ccac47c51f11484aed5e7cf3bdd73dd">Model::GetParameter</a>(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                 <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, parameters_);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#ad94f586b7fe8d530e74ca6188d76632f">   97</a></span>&#160;<a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#ad94f586b7fe8d530e74ca6188d76632f">Model::GetHouseEvent</a>(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                   <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, house_events_);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#ab0ac16c0222b9718760e19a65e736093">  102</a></span>&#160;<a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#ab0ac16c0222b9718760e19a65e736093">Model::GetBasicEvent</a>(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                   <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, basic_events_);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#ac100f59b5e4163a617b5d3b893afd3f9">  107</a></span>&#160;<a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#ac100f59b5e4163a617b5d3b893afd3f9">Model::GetGate</a>(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                       <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, gates_);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;std::shared_ptr&lt;T&gt; Model::GetEntity(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                    <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                    <span class="keyword">const</span> LookupTable&lt;T&gt;&amp; container) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  assert(!entity_reference.empty());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">if</span> (!base_path.empty()) {  <span class="comment">// Check the local scope.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(container.entities_by_path,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                            base_path + <span class="stringliteral">&quot;.&quot;</span> + entity_reference))</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordflow">return</span> *it;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">auto</span> at = [&amp;entity_reference](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; reference_container) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(reference_container, entity_reference))</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordflow">return</span> *it;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;The event cannot be found.&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  };</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">if</span> (entity_reference.find(<span class="charliteral">&#39;.&#39;</span>) == std::string::npos)  <span class="comment">// Public entity.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> at(container.entities_by_id);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> at(container.entities_by_path);  <span class="comment">// Direct access.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">/// Helper macro for Model::BindEvent event discovery.</span></div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="model_8cc.xhtml#a356fb981a8a81d0d259ddaca3fa00fce">  136</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define BIND_EVENT(access, path_reference)                       \</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">  if (auto it = ext::find(gates_.access, path_reference))        \</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">    return formula-&gt;AddArgument(*it);                            \</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">  if (auto it = ext::find(basic_events_.access, path_reference)) \</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    return formula-&gt;AddArgument(*it);                            \</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">  if (auto it = ext::find(house_events_.access, path_reference)) \</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">    return formula-&gt;AddArgument(*it)</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Model.xhtml#ae7266a6fb9b501538885c208dfc934f6">  144</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml#ae7266a6fb9b501538885c208dfc934f6">Model::BindEvent</a>(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                      <span class="keyword">const</span> std::string&amp; base_path, <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* formula) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  assert(!entity_reference.empty());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">if</span> (!base_path.empty()) {  <span class="comment">// Check the local scope.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    std::string full_path = base_path + <span class="stringliteral">&quot;.&quot;</span> + entity_reference;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="model_8cc.xhtml#a356fb981a8a81d0d259ddaca3fa00fce">BIND_EVENT</a>(entities_by_path, full_path);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keywordflow">if</span> (entity_reference.find(<span class="charliteral">&#39;.&#39;</span>) == std::string::npos) {  <span class="comment">// Public entity.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="model_8cc.xhtml#a356fb981a8a81d0d259ddaca3fa00fce">BIND_EVENT</a>(entities_by_id, entity_reference);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// Direct access.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="model_8cc.xhtml#a356fb981a8a81d0d259ddaca3fa00fce">BIND_EVENT</a>(entities_by_path, entity_reference);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;The event cannot be bound.&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#undef BIND_EVENT</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00241">event.h:241</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_ab0ac16c0222b9718760e19a65e736093"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#ab0ac16c0222b9718760e19a65e736093">scram::mef::Model::GetBasicEvent</a></div><div class="ttdeci">BasicEventPtr GetBasicEvent(const std::string &amp;entity_reference, const std::string &amp;base_path)</div><div class="ttdoc">Finds an entity (parameter, basic and house event, gate) from a reference. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00102">model.cc:102</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_ad94f586b7fe8d530e74ca6188d76632f"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#ad94f586b7fe8d530e74ca6188d76632f">scram::mef::Model::GetHouseEvent</a></div><div class="ttdeci">HouseEventPtr GetHouseEvent(const std::string &amp;entity_reference, const std::string &amp;base_path)</div><div class="ttdoc">Finds an entity (parameter, basic and house event, gate) from a reference. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00097">model.cc:97</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="event__tree_8h_xhtml_a591b6cd46293cb8fd4764c12410ebf73"><div class="ttname"><a href="event__tree_8h.xhtml#a591b6cd46293cb8fd4764c12410ebf73">scram::mef::SequencePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Sequence &gt; SequencePtr</div><div class="ttdoc">Sequences are defined in event trees but referenced in other constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00075">event_tree.h:75</a></div></div>
<div class="ttc" id="model_8h_xhtml"><div class="ttname"><a href="model_8h.xhtml">model.h</a></div><div class="ttdoc">Representation for a model container for risk analysis. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a9cc591bf6c40805064ea0a9ec0c453c7"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a9cc591bf6c40805064ea0a9ec0c453c7">scram::mef::Model::Model</a></div><div class="ttdeci">Model(std::string name=&quot;&quot;)</div><div class="ttdoc">Creates a model container. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00031">model.cc:31</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_ae7266a6fb9b501538885c208dfc934f6"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#ae7266a6fb9b501538885c208dfc934f6">scram::mef::Model::BindEvent</a></div><div class="ttdeci">void BindEvent(const std::string &amp;entity_reference, const std::string &amp;base_path, Formula *formula)</div><div class="ttdoc">Binds a formula with its argument event. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00144">model.cc:144</a></div></div>
<div class="ttc" id="event_8h_xhtml_a04cb31142e9883483951cba3ab63b597"><div class="ttname"><a href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">scram::mef::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in models. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00082">event.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1MissionTime_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1MissionTime.xhtml">scram::mef::MissionTime</a></div><div class="ttdoc">The special parameter for system mission time. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00055">parameter.h:55</a></div></div>
<div class="ttc" id="structscram_1_1RedefinitionError_xhtml"><div class="ttname"><a href="structscram_1_1RedefinitionError.xhtml">scram::RedefinitionError</a></div><div class="ttdoc">For cases when events or practically anything is redefined. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00074">error.h:74</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a9fb29cbc2c3de675454fc41c493f1405"><div class="ttname"><a href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">scram::mef::EventTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; EventTree &gt; EventTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00092">event_tree.h:92</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a0ccac47c51f11484aed5e7cf3bdd73dd"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a0ccac47c51f11484aed5e7cf3bdd73dd">scram::mef::Model::GetParameter</a></div><div class="ttdeci">ParameterPtr GetParameter(const std::string &amp;entity_reference, const std::string &amp;base_path)</div><div class="ttdoc">Finds an entity (parameter, basic and house event, gate) from a reference. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00092">model.cc:92</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_a8538f816ccf630916e93bd1432fa07d6"><div class="ttname"><a href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">scram::mef::FaultTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; FaultTree &gt; FaultTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00170">fault_tree.h:170</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_ad02b8dbf956c6c94b34ce9a703d7b408"><div class="ttname"><a href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">scram::mef::ParameterPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Parameter &gt; ParameterPtr</div><div class="ttdoc">Shared parameters. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00126">parameter.h:126</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="event_8h_xhtml_a4ebd6466b2d3ea77c0780af19d75adb9"><div class="ttname"><a href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Shared house events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00168">event.h:168</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a7b7106f97e635f838e07eefd8e7e363a"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a7b7106f97e635f838e07eefd8e7e363a">scram::mef::Model::kDefaultName</a></div><div class="ttdeci">static const char kDefaultName[]</div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00051">model.h:51</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00169">event.h:169</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_ac100f59b5e4163a617b5d3b893afd3f9"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#ac100f59b5e4163a617b5d3b893afd3f9">scram::mef::Model::GetGate</a></div><div class="ttdeci">GatePtr GetGate(const std::string &amp;entity_reference, const std::string &amp;base_path)</div><div class="ttdoc">Finds an entity (parameter, basic and house event, gate) from a reference. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00107">model.cc:107</a></div></div>
<div class="ttc" id="model_8cc_xhtml_a356fb981a8a81d0d259ddaca3fa00fce"><div class="ttname"><a href="model_8cc.xhtml#a356fb981a8a81d0d259ddaca3fa00fce">BIND_EVENT</a></div><div class="ttdeci">#define BIND_EVENT(access, path_reference)</div><div class="ttdoc">Helper macro for Model::BindEvent event discovery. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00136">model.cc:136</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml_a2736f823d103bed2d002c9ce6f0c217c"><div class="ttname"><a href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">scram::mef::CcfGroupPtr</a></div><div class="ttdeci">std::shared_ptr&lt; CcfGroup &gt; CcfGroupPtr</div><div class="ttdoc">Shared CCF groups. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00190">ccf_group.h:190</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a1ebc111c90194d255400e58a8ab02563"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a1ebc111c90194d255400e58a8ab02563">scram::mef::Model::Add</a></div><div class="ttdeci">void Add(EventTreePtr element)</div><div class="ttdoc">Adds MEF constructs into the model container. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cc_source.xhtml#l00035">model.cc:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Mar 31 2017 15:09:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
