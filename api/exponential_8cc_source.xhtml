<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>exponential.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">exponential.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="exponential_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file exponential.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of various exponential expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="exponential_8h.xhtml">exponential.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">src/error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/// Checks and throws if an expression is negative.</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">   31</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define THROW_NEGATIVE_EXPR(expr, description)                          \</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">  do {                                                                  \</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">    if (expr.Mean() &lt; 0)                                                \</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">      throw InvalidArgument(&quot;The &quot; description &quot; cannot be negative.&quot;); \</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">    if (expr.Min() &lt; 0)                                                 \</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">      throw InvalidArgument(&quot;The sampled &quot; description                  \</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">                            &quot; cannot be negative.&quot;);                    \</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">  } while (false)</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// Checks and throws if an expression is negative or 0.</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">   41</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define THROW_NON_POSITIVE_EXPR(expr, description)                            \</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">  do {                                                                        \</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">    if (expr.Mean() &lt;= 0)                                                     \</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">      throw InvalidArgument(&quot;The &quot; description &quot; must be positive.&quot;);         \</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">    if (expr.Min() &lt;= 0)                                                      \</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">      throw InvalidArgument(&quot;The sampled &quot; description &quot; must be positive.&quot;); \</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">  } while (false)</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/// Checks and throws if probability expression values are invalid.</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">   50</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define THROW_INVALID_PROBABILITY(expr, description)                       \</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">  do {                                                                     \</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">    if (expr.Mean() &lt; 0 || expr.Mean() &gt; 1)                                \</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">      throw InvalidArgument(&quot;Invalid probability value for &quot; description); \</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    if (expr.Min() &lt; 0 || expr.Max() &gt; 1)                                  \</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">      throw InvalidArgument(                                               \</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">          &quot;Invalid probability sampled value for &quot; description);           \</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">  } while (false)</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Poisson process probability evaluators.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/// Negative exponential law probability for Poisson process.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/// @param[in] lambda  The rate of the process.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/// @param[in] time  The time lapse since the last observation.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/// @returns The probability that the process has occurred by the given time.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span><span class="keywordtype">double</span> p_exp(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> time) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">return</span> 1 - std::exp(-lambda * time);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// The probability description for two consecutive Poisson processes</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// starting one after another.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// In other words,</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/// the second process is dependent upon the first process.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">/// @param[in] p_mu  The probability of the first process (dependency).</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @param[in] p_lambda  The probability of the second process (dependent).</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/// @param[in] mu  The rate of the first process.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">/// @param[in] lambda  The rate of the second process.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">/// @param[in] time  The time period under question.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">/// @returns The probability that the second process has occurred.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span><span class="keywordtype">double</span> p_exp(<span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> p_lambda, <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> lambda,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;             <span class="keywordtype">double</span> time) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">return</span> lambda == mu ? p_lambda - (1 - p_lambda) * lambda * time</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                      : (lambda * p_mu - mu * p_lambda) / (lambda - mu);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a73c12893dfea9846ec23d38fbad57386">   91</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a73c12893dfea9846ec23d38fbad57386">ExponentialExpression::ExponentialExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({lambda, t}),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      lambda_(*lambda),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      time_(*t) {}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">   97</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">ExponentialExpression::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(lambda_, <span class="stringliteral">&quot;rate of failure&quot;</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(time_, <span class="stringliteral">&quot;mission time&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">  102</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">ExponentialExpression::Mean</a>() noexcept {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> p_exp(lambda_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">double</span> ExponentialExpression::DoSample() noexcept {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> p_exp(lambda_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml#a1bec2390177b418772f3782241f7d2d1">  110</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml#a1bec2390177b418772f3782241f7d2d1">GlmExpression::GlmExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; gamma,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({gamma, lambda, mu, t}),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      gamma_(*gamma),</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      lambda_(*lambda),</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      mu_(*mu),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      time_(*t) {}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml#a1b309aac9f4156cb3c54735b8f7528cd">  120</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml#a1b309aac9f4156cb3c54735b8f7528cd">GlmExpression::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(lambda_, <span class="stringliteral">&quot;rate of failure&quot;</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(mu_, <span class="stringliteral">&quot;rate of repair&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(time_, <span class="stringliteral">&quot;mission time&quot;</span>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">THROW_INVALID_PROBABILITY</a>(gamma_, <span class="stringliteral">&quot;failure on demand&quot;</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml#a8ee502d7486c54d01114f6705998eacb">  127</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml#a8ee502d7486c54d01114f6705998eacb">GlmExpression::Mean</a>() noexcept {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">return</span> Compute(gamma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), lambda_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), mu_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keywordtype">double</span> GlmExpression::DoSample() noexcept {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> Compute(gamma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), lambda_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), mu_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(),</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                 time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keywordtype">double</span> GlmExpression::Compute(<span class="keywordtype">double</span> gamma, <span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> mu,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                              <span class="keywordtype">double</span> time) noexcept {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordtype">double</span> r = lambda + mu;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">return</span> (lambda - (lambda - gamma * r) * std::exp(-r * time)) / r;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a08ce985ec333dc8c2e6c23a00ead88c0">  142</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a08ce985ec333dc8c2e6c23a00ead88c0">WeibullExpression::WeibullExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; alpha,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; beta,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t0,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({alpha, beta, t0, time}),</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      alpha_(*alpha),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      beta_(*beta),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      t0_(*t0),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      time_(*time) {}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a59851c3a89342bf4fe6518fa8414fac1">  152</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a59851c3a89342bf4fe6518fa8414fac1">WeibullExpression::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(alpha_, <span class="stringliteral">&quot;scale parameter for Weibull distribution&quot;</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(beta_, <span class="stringliteral">&quot;shape parameter for Weibull distribution&quot;</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(t0_, <span class="stringliteral">&quot;time shift&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(time_, <span class="stringliteral">&quot;mission time&quot;</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keywordtype">double</span> WeibullExpression::Compute(<span class="keywordtype">double</span> alpha, <span class="keywordtype">double</span> beta,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                  <span class="keywordtype">double</span> t0, <span class="keywordtype">double</span> time) noexcept {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">return</span> time &lt;= t0 ? 0 : 1 - std::exp(-std::pow((time - t0) / alpha, beta));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a002a31460e00bb231399dcc1e6d0869d">  164</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a002a31460e00bb231399dcc1e6d0869d">WeibullExpression::Mean</a>() noexcept {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordflow">return</span> Compute(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), t0_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordtype">double</span> WeibullExpression::DoSample() noexcept {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">return</span> Compute(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), t0_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), time_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a4d13fffe86e58bc11739fbce88ee16c9">  172</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a4d13fffe86e58bc11739fbce88ee16c9">PeriodicTest::PeriodicTest</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                           <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                           <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({lambda, tau, theta, time}),</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      flavor_(<span class="keyword">new</span> PeriodicTest::InstantRepair(lambda, tau, theta, time)) {}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a2aac8c93c20cc7af9c9b99e5899284fb">  178</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a4d13fffe86e58bc11739fbce88ee16c9">PeriodicTest::PeriodicTest</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                           <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                           <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({lambda, mu, tau, theta, time}),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      flavor_(<span class="keyword">new</span> PeriodicTest::InstantTest(lambda, mu, tau, theta, time)) {}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a83fe7e9b83c2ba250c2c2f05dc557be4">  184</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a4d13fffe86e58bc11739fbce88ee16c9">PeriodicTest::PeriodicTest</a>(</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda_test,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; gamma,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; test_duration, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; available_at_test,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; sigma, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; omega,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({lambda, lambda_test, mu, tau, theta, gamma, test_duration,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                  available_at_test, sigma, omega, time}),</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      flavor_(<span class="keyword">new</span> PeriodicTest::Complete(</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;          lambda, lambda_test, mu, tau, theta, gamma, test_duration,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;          available_at_test, sigma, omega, time)) {}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keywordtype">void</span> PeriodicTest::InstantRepair::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(lambda_, <span class="stringliteral">&quot;rate of failure&quot;</span>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(tau_, <span class="stringliteral">&quot;time between tests&quot;</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(theta_, <span class="stringliteral">&quot;time before tests&quot;</span>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(time_, <span class="stringliteral">&quot;mission time&quot;</span>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keywordtype">void</span> PeriodicTest::InstantTest::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  InstantRepair::Validate();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(mu_, <span class="stringliteral">&quot;rate of repair&quot;</span>);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordtype">void</span> PeriodicTest::Complete::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  InstantTest::Validate();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <a class="code" href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a>(lambda_test_, <span class="stringliteral">&quot;rate of failure while under test&quot;</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a>(test_duration_, <span class="stringliteral">&quot;duration of the test phase&quot;</span>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">THROW_INVALID_PROBABILITY</a>(gamma_, <span class="stringliteral">&quot;failure at test start&quot;</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">THROW_INVALID_PROBABILITY</a>(sigma_, <span class="stringliteral">&quot;failure detection upon test&quot;</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <a class="code" href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">THROW_INVALID_PROBABILITY</a>(omega_, <span class="stringliteral">&quot;failure at restart&quot;</span>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">if</span> (test_duration_.Mean() &gt; tau_.Mean())</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="stringliteral">&quot;The test duration must be less than the time between tests.&quot;</span>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keywordflow">if</span> (test_duration_.Max() &gt; tau_.Min())</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="stringliteral">&quot;The sampled test duration must be less than the time between tests.&quot;</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#undef THROW_NEGATIVE_EXPR</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#undef THROW_NON_POSITIVE_EXPR</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">#undef THROW_INVALID_PROBABILITY</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantRepair::Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> tau,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                            <span class="keywordtype">double</span> theta,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                            <span class="keywordtype">double</span> time) noexcept {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keywordflow">if</span> (time &lt;= theta)  <span class="comment">// No test has been performed.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> p_exp(lambda, time);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keywordtype">double</span> delta = time - theta;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordtype">double</span> time_after_test = delta - <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(delta / tau) * tau;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <span class="keywordflow">return</span> p_exp(lambda, time_after_test ? time_after_test : tau);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantRepair::Mean() noexcept {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Mean(), tau_.Mean(), theta_.Mean(), time_.Mean());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantRepair::Sample() noexcept {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Sample(), tau_.Sample(), theta_.Sample(),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                 time_.Sample());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantTest::Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> tau,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                          <span class="keywordtype">double</span> theta, <span class="keywordtype">double</span> time) noexcept {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="keywordflow">if</span> (time &lt;= theta)  <span class="comment">// No test has been performed.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> p_exp(lambda, time);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="comment">// Carry fraction from probability of a previous period.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keyword">auto</span> carry = [&amp;lambda, &amp;mu](<span class="keywordtype">double</span> p_lambda, <span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> t) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Probability of failure after repair.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordtype">double</span> p_mu_lambda = p_exp(p_lambda, p_mu, lambda, mu, t);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> 1 - p_mu + p_mu_lambda - p_lambda;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  };</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordtype">double</span> prob = p_exp(lambda, theta);  <span class="comment">// The current rolling probability.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keyword">auto</span> p_period = [&amp;prob, &amp;carry](<span class="keywordtype">double</span> p_lambda, <span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> t) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> prob * carry(p_lambda, p_mu, t) + p_lambda;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  };</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordtype">double</span> delta = time - theta;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordtype">int</span> num_periods = delta / tau;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keywordtype">double</span> fraction = carry(p_exp(lambda, tau), p_exp(mu, tau), tau);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordtype">double</span> compound = std::pow(fraction, num_periods);  <span class="comment">// Geometric progression.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  prob = prob * compound + p_exp(lambda, tau) * (compound - 1) / (fraction - 1);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordtype">double</span> time_after_test = delta - num_periods * tau;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keywordflow">return</span> p_period(p_exp(lambda, time_after_test), p_exp(mu, time_after_test),</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                  time_after_test);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantTest::Mean() noexcept {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Mean(), mu_.Mean(), tau_.Mean(), theta_.Mean(),</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                 time_.Mean());</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keywordtype">double</span> PeriodicTest::InstantTest::Sample() noexcept {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Sample(), mu_.Sample(), tau_.Sample(), theta_.Sample(),</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                 time_.Sample());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordtype">double</span> PeriodicTest::Complete::Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> lambda_test,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                       <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> tau, <span class="keywordtype">double</span> theta,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                       <span class="keywordtype">double</span> gamma, <span class="keywordtype">double</span> test_duration,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                       <span class="keywordtype">bool</span> available_at_test, <span class="keywordtype">double</span> sigma,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                       <span class="keywordtype">double</span> omega, <span class="keywordtype">double</span> time) noexcept {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">if</span> (time &lt;= theta)  <span class="comment">// No test has been performed.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">return</span> p_exp(lambda, time);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keywordtype">double</span> p_fail = p_exp(lambda, theta);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordtype">double</span> p_repair = 0;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keywordtype">double</span> p_available = 1 - p_fail;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="comment">// Failure after repair.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="keyword">auto</span> p_mu_lambda = [&amp;](<span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> p_lambda, <span class="keywordtype">double</span> t) {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> p_mu * omega + (1 - omega) * p_exp(p_mu, p_lambda, mu, lambda, t);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  };</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">auto</span> p_test = [&amp;](<span class="keywordtype">double</span> p_lambda_test, <span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> p_lambda,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    <span class="keywordtype">double</span> t, <span class="keywordtype">bool</span> available = <span class="keyword">true</span>) {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">double</span> p_fail_transient =</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        p_fail + p_available * (gamma + (1 - gamma) * p_lambda_test);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    p_fail = p_repair * p_mu_lambda(p_mu, p_lambda, t) +</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;             (1 - sigma) * p_fail_transient;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    p_repair = (1 - p_mu) * p_repair + sigma * p_fail_transient;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    p_available =</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        1 - p_fail - p_repair -</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        (available ? 0 : p_available * (1 - gamma) * (1 - p_lambda_test));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    assert(p_repair &gt;= 0 &amp;&amp; p_repair &lt;= 1);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    assert(p_fail &gt;= 0 &amp;&amp; p_fail &lt;= 1);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    assert(p_available &gt;= 0);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  };</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="comment">// Time after test.</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="keyword">auto</span> p_period = [&amp;](<span class="keywordtype">double</span> p_lambda, <span class="keywordtype">double</span> p_mu, <span class="keywordtype">double</span> t) {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    p_fail = p_available * p_lambda + p_fail +</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;             p_repair * p_mu_lambda(p_mu, p_lambda, t);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    p_repair = p_repair * (1 - p_mu);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    p_available = 1 - p_fail - p_repair;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    assert(p_repair &gt;= 0 &amp;&amp; p_repair &lt;= 1);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    assert(p_fail &gt;= 0 &amp;&amp; p_fail &lt;= 1);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    assert(p_available &gt;= 0);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  };</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordtype">double</span> delta = time - theta;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordtype">int</span> num_periods = delta / tau;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordtype">double</span> delta_period = tau - test_duration;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordtype">double</span> p_lambda_test = p_exp(lambda_test, test_duration);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordtype">double</span> p_lambda_at_test = p_exp(lambda, test_duration);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordtype">double</span> p_mu_at_test = p_exp(mu, test_duration);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordtype">double</span> p_lambda = p_exp(lambda, delta_period);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordtype">double</span> p_mu = p_exp(mu, delta_period);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_periods; ++i) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    p_test(p_lambda_test, p_mu_at_test, p_lambda_at_test, test_duration);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    p_period(p_lambda, p_mu, delta_period);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordtype">double</span> time_after_test = delta - num_periods * tau;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keywordflow">if</span> (time_after_test &lt;= test_duration) {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    p_test(p_exp(lambda_test, time_after_test), p_exp(mu, time_after_test),</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;           p_exp(lambda, time_after_test), time_after_test, available_at_test);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    p_test(p_lambda_test, p_mu_at_test, p_lambda_at_test, test_duration);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordtype">double</span> leftover_time = time_after_test - test_duration;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    p_period(p_exp(lambda, leftover_time), p_exp(mu, leftover_time),</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;             leftover_time);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  assert(p_available &gt;= 0 &amp;&amp; p_available &lt;= 1);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keywordflow">return</span> 1 - p_available;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keywordtype">double</span> PeriodicTest::Complete::Mean() noexcept {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Mean(), lambda_test_.Mean(), mu_.Mean(), tau_.Mean(),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                 theta_.Mean(), gamma_.Mean(), test_duration_.Mean(),</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                 available_at_test_.Mean(), sigma_.Mean(), omega_.Mean(),</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                 time_.Mean());</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keywordtype">double</span> PeriodicTest::Complete::Sample() noexcept {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">return</span> Compute(lambda_.Sample(), lambda_test_.Sample(), mu_.Sample(),</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                 tau_.Sample(), theta_.Sample(), gamma_.Sample(),</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                 test_duration_.Sample(), available_at_test_.Sample(),</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                 sigma_.Sample(), omega_.Sample(), time_.Sample());</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac7e0dd118eafdfa943944172c1625a4e"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">scram::mef::Expression::Mean</a></div><div class="ttdeci">virtual double Mean() noexcept=0</div></div>
<div class="ttc" id="exponential_8cc_xhtml_aa92018b15c473d5a824f1af8ae0a862a"><div class="ttname"><a href="exponential_8cc.xhtml#aa92018b15c473d5a824f1af8ae0a862a">THROW_NEGATIVE_EXPR</a></div><div class="ttdeci">#define THROW_NEGATIVE_EXPR(expr, description)</div><div class="ttdoc">Checks and throws if an expression is negative. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00031">exponential.cc:31</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="exponential_8cc_xhtml_a83a8259fc8885a4985ee51aa362a39c7"><div class="ttname"><a href="exponential_8cc.xhtml#a83a8259fc8885a4985ee51aa362a39c7">THROW_INVALID_PROBABILITY</a></div><div class="ttdeci">#define THROW_INVALID_PROBABILITY(expr, description)</div><div class="ttdoc">Checks and throws if probability expression values are invalid. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00050">exponential.cc:50</a></div></div>
<div class="ttc" id="exponential_8cc_xhtml_a79a5016b39be5c83f404acec1de743d1"><div class="ttname"><a href="exponential_8cc.xhtml#a79a5016b39be5c83f404acec1de743d1">THROW_NON_POSITIVE_EXPR</a></div><div class="ttdeci">#define THROW_NON_POSITIVE_EXPR(expr, description)</div><div class="ttdoc">Checks and throws if an expression is negative or 0. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00041">exponential.cc:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml_a08ce985ec333dc8c2e6c23a00ead88c0"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml#a08ce985ec333dc8c2e6c23a00ead88c0">scram::mef::WeibullExpression::WeibullExpression</a></div><div class="ttdeci">WeibullExpression(const ExpressionPtr &amp;alpha, const ExpressionPtr &amp;beta, const ExpressionPtr &amp;t0, const ExpressionPtr &amp;time)</div><div class="ttdoc">Constructor for Weibull distribution. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00142">exponential.cc:142</a></div></div>
<div class="ttc" id="exponential_8h_xhtml"><div class="ttname"><a href="exponential_8h.xhtml">exponential.h</a></div><div class="ttdoc">Expressions and distributions that are described with exponential formulas. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a6340b19d90ee77040e2d06cbfa39ac79"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">scram::mef::ExponentialExpression::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00102">exponential.cc:102</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml_a1b309aac9f4156cb3c54735b8f7528cd"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml#a1b309aac9f4156cb3c54735b8f7528cd">scram::mef::GlmExpression::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00120">exponential.cc:120</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a73c12893dfea9846ec23d38fbad57386"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a73c12893dfea9846ec23d38fbad57386">scram::mef::ExponentialExpression::ExponentialExpression</a></div><div class="ttdeci">ExponentialExpression(const ExpressionPtr &amp;lambda, const ExpressionPtr &amp;t)</div><div class="ttdoc">Constructor for exponential expression with two arguments. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00091">exponential.cc:91</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml_a4d13fffe86e58bc11739fbce88ee16c9"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml#a4d13fffe86e58bc11739fbce88ee16c9">scram::mef::PeriodicTest::PeriodicTest</a></div><div class="ttdeci">PeriodicTest(const ExpressionPtr &amp;lambda, const ExpressionPtr &amp;tau, const ExpressionPtr &amp;theta, const ExpressionPtr &amp;time)</div><div class="ttdoc">Periodic tests with tests and repairs instantaneous and always successful. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00172">exponential.cc:172</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml_a59851c3a89342bf4fe6518fa8414fac1"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml#a59851c3a89342bf4fe6518fa8414fac1">scram::mef::WeibullExpression::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00152">exponential.cc:152</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml_a002a31460e00bb231399dcc1e6d0869d"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml#a002a31460e00bb231399dcc1e6d0869d">scram::mef::WeibullExpression::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00164">exponential.cc:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a9780ad4bfee039cdb147a4f3cc4a4823"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">scram::mef::ExponentialExpression::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00097">exponential.cc:97</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml_a8ee502d7486c54d01114f6705998eacb"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml#a8ee502d7486c54d01114f6705998eacb">scram::mef::GlmExpression::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00127">exponential.cc:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml_a1bec2390177b418772f3782241f7d2d1"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml#a1bec2390177b418772f3782241f7d2d1">scram::mef::GlmExpression::GlmExpression</a></div><div class="ttdeci">GlmExpression(const ExpressionPtr &amp;gamma, const ExpressionPtr &amp;lambda, const ExpressionPtr &amp;mu, const ExpressionPtr &amp;t)</div><div class="ttdoc">Constructor for GLM or exponential expression with four arguments. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00110">exponential.cc:110</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Mar 31 2017 15:09:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
