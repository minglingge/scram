<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>exponential.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">exponential.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="exponential_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file exponential.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Expressions and distributions</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// that are described with exponential formulas.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_EXPRESSION_EXPONENTIAL_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define SCRAM_SRC_EXPRESSION_EXPONENTIAL_H_</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">src/expression.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/// Negative exponential distribution</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">/// with hourly failure rate and time.</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml">   34</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml">ExponentialExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">  /// Constructor for exponential expression with two arguments.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">  /// @param[in] lambda  Hourly rate of failure.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">  /// @param[in] t  Mission time in hours.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a73c12893dfea9846ec23d38fbad57386">ExponentialExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  /// @throws InvalidArgument  The failure rate or time is negative.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#afca0b657b9ee71dd7c841641044a278a">   45</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#afca0b657b9ee71dd7c841641044a278a">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 1; }</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a2e97ea7d13408b598a7938f60273a1fe">   46</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a2e97ea7d13408b598a7938f60273a1fe">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 0; }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">double</span> DoSample() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; lambda_;  <span class="comment">///&lt; Failure rate in hours.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; time_;  <span class="comment">///&lt; Mission time in hours.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// Exponential with probability of failure on demand,</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// hourly failure rate, hourly repairing rate, and time.</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml">   57</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml">GlmExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /// Constructor for GLM or exponential expression with four arguments.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @param[in] gamma  Probability of failure on demand.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @param[in] lambda  Hourly rate of failure.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// @param[in] mu  Hourly repair rate.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  /// @param[in] t  Mission time in hours.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml">GlmExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; gamma, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fffdff5bbefbc20f4465e2e580af305">   70</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fffdff5bbefbc20f4465e2e580af305">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 1; }</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fd2b4647f03c96bb04df8c23c25b631">   71</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fd2b4647f03c96bb04df8c23c25b631">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 0; }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordtype">double</span> DoSample() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// Computes the value for GLM expression.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> gamma, <span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> time) noexcept;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; gamma_;  <span class="comment">///&lt; Probability of failure on demand.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; lambda_;  <span class="comment">///&lt; Failure rate in hours.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; mu_;  <span class="comment">///&lt; Repair rate in hours.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; time_;  <span class="comment">///&lt; Mission time in hours.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/// Weibull distribution with scale, shape, time shift, and time.</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml">   86</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml">WeibullExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  /// Constructor for Weibull distribution.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @param[in] alpha  Scale parameter.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// @param[in] beta  Shape parameter.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @param[in] t0  Time shift.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  /// @param[in] time  Mission time.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml">WeibullExpression</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; alpha, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; beta,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; t0, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml#aa21d5c3313c08d65b905c2e31e9ab810">   99</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml#aa21d5c3313c08d65b905c2e31e9ab810">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 1; }</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a4e46fcad1816935f7101a065da27bd2c">  100</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1WeibullExpression.xhtml#a4e46fcad1816935f7101a065da27bd2c">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 0; }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">double</span> DoSample() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// Calculates Weibull expression.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> alpha, <span class="keywordtype">double</span> beta, <span class="keywordtype">double</span> t0, <span class="keywordtype">double</span> time) noexcept;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; alpha_;  <span class="comment">///&lt; Scale parameter.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; beta_;  <span class="comment">///&lt; Shape parameter.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; t0_;  <span class="comment">///&lt; Time shift in hours.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; time_;  <span class="comment">///&lt; Mission time in hours.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/// Periodic test with 3 phases: deploy, test, functioning.</span></div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml">  115</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml">PeriodicTest</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  /// Periodic tests with tests and repairs instantaneous and always successful.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  /// @param[in] lambda  The failure rate (hourly) when functioning.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// @param[in] tau  The time between tests in hours.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @param[in] theta  The time before the first test in hours.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  /// @param[in] time  The current mission time in hours.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml">PeriodicTest</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// Periodic tests with tests instantaneous and always successful.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @copydetails PeriodicTest(const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;)</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// @param[in] mu  The repair rate (hourly).</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml">PeriodicTest</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// Fully parametrized periodic-test description.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// @copydetails PeriodicTest(const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  ///                           const ExpressionPtr&amp;)</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @param[in] lambda_test  The component failure rate while under test.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// @param[in] gamma  The failure probability due to or at test start.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  /// @param[in] test_duration  The duration of the test phase.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  /// @param[in] available_at_test  Indicator of component availability at test.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// @param[in] sigma  The probability of failure detection upon test.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// @param[in] omega  The probability of failure at restart after repair/test.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml">PeriodicTest</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda_test,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; gamma,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; test_duration,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; available_at_test,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; sigma, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; omega,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a092910c97ee562ee348092610cb0e65a">  154</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a092910c97ee562ee348092610cb0e65a">Validate</a>()<span class="keyword"> const override </span>{ flavor_-&gt;Validate(); }</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a3330d24a1e8fb7cf113a60dec686fb98">  155</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a3330d24a1e8fb7cf113a60dec686fb98">Mean</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> flavor_-&gt;Mean(); }</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a92537c073730a90d2a7d785b73753b0a">  156</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#a92537c073730a90d2a7d785b73753b0a">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 1; }</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PeriodicTest.xhtml#acd1ec7b252bc43adaf2c473997a54254">  157</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1PeriodicTest.xhtml#acd1ec7b252bc43adaf2c473997a54254">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> 0; }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordtype">double</span> DoSample() noexcept <span class="keyword">override</span> { <span class="keywordflow">return</span> flavor_-&gt;Sample(); }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">  /// The base class for various flavors of periodic-test computation.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>Flavor {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">virtual</span> ~Flavor() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /// @copydoc Expression::Validate</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const</span> = 0;<span class="comment"></span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">    /// @copydoc Expression::Mean</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept = 0;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">    /// @copydoc Expression::Sample</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept = 0;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  };</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  /// The tests and repairs are instantaneous and always successful.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span>  <span class="keyword">class </span>InstantRepair : <span class="keyword">public</span> Flavor {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">    /// The same semantics as for 4 argument periodic-test.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span>    InstantRepair(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                  <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        : lambda_(*lambda), tau_(*tau), theta_(*theta), time_(*time) {}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   <span class="keyword">protected</span>:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; lambda_;  <span class="comment">///&lt; The failure rate when functioning.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; tau_;  <span class="comment">///&lt; The time between tests in hours.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; theta_;  <span class="comment">///&lt; The time before the first test.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; time_;  <span class="comment">///&lt; The current time.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">    /// Computes the expression value.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span>    <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> tau, <span class="keywordtype">double</span> theta,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                   <span class="keywordtype">double</span> time) noexcept;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  };</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  /// The tests are instantaneous and always successful,</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  /// but repairs are not.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"></span>  <span class="keyword">class </span>InstantTest : <span class="keyword">public</span> InstantRepair {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /// The same semantics as for 5 argument periodic-test.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"></span>    InstantTest(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        : InstantRepair(lambda, tau, theta, time), mu_(*mu) {}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;   <span class="keyword">protected</span>:</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; mu_;  <span class="comment">///&lt; The repair rate.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">    /// Computes the expression value.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span>    <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> tau, <span class="keywordtype">double</span> theta,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                   <span class="keywordtype">double</span> time) noexcept;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  };</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  /// The full representation of periodic test with 11 arguments.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span>  <span class="keyword">class </span>Complete : <span class="keyword">public</span> InstantTest {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">    /// The parameters have the same semantics as 11 argument periodic-test.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span>    Complete(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; lambda_test,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mu, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; tau,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; gamma,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; test_duration,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; available_at_test, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; sigma,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; omega, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; time)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        : InstantTest(lambda, mu, tau, theta, time),</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;          lambda_test_(*lambda_test),</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;          gamma_(*gamma),</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;          test_duration_(*test_duration),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          available_at_test_(*available_at_test),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;          sigma_(*sigma),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          omega_(*omega) {}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /// @returns The expression value.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    /// @copydetails PeriodicTest(const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">    ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">    ///                           const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">    ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;,</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">    ///                           const ExpressionPtr&amp;, const ExpressionPtr&amp;)</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>    <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> lambda, <span class="keywordtype">double</span> lambda_test, <span class="keywordtype">double</span> mu, <span class="keywordtype">double</span> tau,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                   <span class="keywordtype">double</span> theta, <span class="keywordtype">double</span> gamma, <span class="keywordtype">double</span> test_duration,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                   <span class="keywordtype">bool</span> available_at_test, <span class="keywordtype">double</span> sigma, <span class="keywordtype">double</span> omega,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                   <span class="keywordtype">double</span> time) noexcept;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; lambda_test_;  <span class="comment">///&lt; The failure rate while under test.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; gamma_;  <span class="comment">///&lt; The failure probability due to or at test start.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; test_duration_;  <span class="comment">///&lt; The duration of the test phase.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; available_at_test_;  <span class="comment">///&lt; The indicator of availability at test.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; sigma_;  <span class="comment">///&lt; The probability of failure detection upon test.</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; omega_;  <span class="comment">///&lt; The probability of failure at restart.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  std::unique_ptr&lt;Flavor&gt; flavor_;  <span class="comment">///&lt; Specialized flavor of calculations.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_EXPRESSION_EXPONENTIAL_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml_a7fd2b4647f03c96bb04df8c23c25b631"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fd2b4647f03c96bb04df8c23c25b631">scram::mef::GlmExpression::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00071">exponential.h:71</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a2e97ea7d13408b598a7938f60273a1fe"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a2e97ea7d13408b598a7938f60273a1fe">scram::mef::ExponentialExpression::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00046">exponential.h:46</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml_acd1ec7b252bc43adaf2c473997a54254"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml#acd1ec7b252bc43adaf2c473997a54254">scram::mef::PeriodicTest::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00157">exponential.h:157</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml">scram::mef::PeriodicTest</a></div><div class="ttdoc">Periodic test with 3 phases: deploy, test, functioning. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00115">exponential.h:115</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml_a4e46fcad1816935f7101a065da27bd2c"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml#a4e46fcad1816935f7101a065da27bd2c">scram::mef::WeibullExpression::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00100">exponential.h:100</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml_a092910c97ee562ee348092610cb0e65a"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml#a092910c97ee562ee348092610cb0e65a">scram::mef::PeriodicTest::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00154">exponential.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_afca0b657b9ee71dd7c841641044a278a"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#afca0b657b9ee71dd7c841641044a278a">scram::mef::ExponentialExpression::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00045">exponential.h:45</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml_a92537c073730a90d2a7d785b73753b0a"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml#a92537c073730a90d2a7d785b73753b0a">scram::mef::PeriodicTest::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00156">exponential.h:156</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml_a7fffdff5bbefbc20f4465e2e580af305"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml#a7fffdff5bbefbc20f4465e2e580af305">scram::mef::GlmExpression::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00070">exponential.h:70</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a6340b19d90ee77040e2d06cbfa39ac79"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a6340b19d90ee77040e2d06cbfa39ac79">scram::mef::ExponentialExpression::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00102">exponential.cc:102</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PeriodicTest_xhtml_a3330d24a1e8fb7cf113a60dec686fb98"><div class="ttname"><a href="classscram_1_1mef_1_1PeriodicTest.xhtml#a3330d24a1e8fb7cf113a60dec686fb98">scram::mef::PeriodicTest::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00155">exponential.h:155</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a73c12893dfea9846ec23d38fbad57386"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a73c12893dfea9846ec23d38fbad57386">scram::mef::ExponentialExpression::ExponentialExpression</a></div><div class="ttdeci">ExponentialExpression(const ExpressionPtr &amp;lambda, const ExpressionPtr &amp;t)</div><div class="ttdoc">Constructor for exponential expression with two arguments. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00091">exponential.cc:91</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml_a9780ad4bfee039cdb147a4f3cc4a4823"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml#a9780ad4bfee039cdb147a4f3cc4a4823">scram::mef::ExponentialExpression::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8cc_source.xhtml#l00097">exponential.cc:97</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExponentialExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExponentialExpression.xhtml">scram::mef::ExponentialExpression</a></div><div class="ttdoc">Negative exponential distribution with hourly failure rate and time. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00034">exponential.h:34</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1GlmExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1GlmExpression.xhtml">scram::mef::GlmExpression</a></div><div class="ttdoc">Exponential with probability of failure on demand, hourly failure rate, hourly repairing rate...</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00057">exponential.h:57</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml_aa21d5c3313c08d65b905c2e31e9ab810"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml#aa21d5c3313c08d65b905c2e31e9ab810">scram::mef::WeibullExpression::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00099">exponential.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1WeibullExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1WeibullExpression.xhtml">scram::mef::WeibullExpression</a></div><div class="ttdoc">Weibull distribution with scale, shape, time shift, and time. </div><div class="ttdef"><b>Definition:</b> <a href="exponential_8h_source.xhtml#l00086">exponential.h:86</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Mar 31 2017 15:09:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
